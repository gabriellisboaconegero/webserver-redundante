services:
  web-server1:
    container_name: web-server1
    build: ./server
    env_file: .env
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=pgpool
      - POSTGRES_PORT=9999
      - POSTGRES_TABLE=infos
    volumes:
      - ./server/app.py:/app/app.py
    depends_on:
      - pgpool

  web-server2:
    container_name: web-server2
    build: ./server
    env_file: .env
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=pgpool
      - POSTGRES_PORT=9999
      - POSTGRES_TABLE=infos
    volumes:
      - ./server/app.py:/app/app.py
    depends_on:
      - pgpool
  
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - 8080:8080
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web-server1
      - web-server2

  postgres-primary:
    healthcheck:
      test: 'pg_isready -U postgres --dbname=postgres'
      interval: 10s
      timeout: 5s
      retries: 5
    build: ./postgres
    env_file: ".env"
    environment:
      - DB_REP_USER=replicador
      - DB_REP_PASS=megasenha
      - REP_MODE=primary
    volumes:
      - pgmaster:/var/lib/postgresql/data
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
  
  postgres-replica:
    build: ./postgres
    user: postgres
    environment:
      - PRIMARY_DB_HOST=postgres-primary
      - PRIMARY_DB_PORT=5432
      - PRIMARY_DB_REP_USER=replicador
      - PRIMARY_DB_REP_USER_PASS=megasenha
      - REP_MODE=replica
    volumes:
      - pgreplica:/var/lib/postgresql/data
    depends_on:
      - postgres-primary
    
  pgpool:
    build: ./pgpool
    ports:
      - 9999:9999
    links:
      - postgres-primary
      - postgres-replica
    environment:
      - WAIT_DB_HOSTS=postgres-primary postgres-replica
    volumes:
      - ./pgpool/pgpool.conf:/etc/pgpool2/pgpool.conf

volumes:
  pgmaster:
  pgreplica: